name: Reusable Ko build
on:
  workflow_call:
    inputs:
      registryOverride:
        required: false
        type: string
        description: |
          a container registry to use instead of ghcr.io.
          e.g:
            - quay.io
            - registry.gitlab.com/somecoolproject
            - ghcr.io/somecoolproject/thing
      paths:
        required: false
        type: string
        description: |
          the Go entrypoint paths for applications, where there they have `package main`
          e.g: ./cmd/thing1 ./cmd/thing2
      configPath:
        required: false
        default: ./config/
        type: string
        description: |
          the path to resolvable YAML files.
          see: https://ko.build/features/k8s/#ko-resolve
      push:
        required: false
        default: true
        type: boolean
        description: |
          set to true to push an image to a registry. When set to false, it will build and exit
    outputs:
      images:
        value: ${{ jobs.build.outputs.images }}
jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      images: ${{ steps.build.outputs.images }}
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      - name: configure system
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
          gh auth status
      - uses: sigstore/cosign-installer@dd6b2e2b610a11fd73dd187a43d57cc1394e35f9 # v3.0.5
      - uses: chainguard-dev/actions/setup-gitsign@698f3ff7c4a8be5d91c8ece9a5859e29cfe58803 # main
      - id: run-info
        name: collect job run info
        env:
          KO_DOCKER_REPO: ghcr.io/${{ github.repository }}
        run: |
          if [ -n "${{ inputs.registryOverride }}" ]; then
            KO_DOCKER_REPO="${{ inputs.registryOverride }}"
          fi
          echo "ko-docker-repo=${KO_DOCKER_REPO,,}" >> $GITHUB_OUTPUT
          if [ -n "${{ inputs.paths }}" ]; then
            echo "paths=$(echo '${{ inputs.paths }}' | tr '\n' ' ')" >> $GITHUB_OUTPUT
          else
            PATHS="$(grep -r 'package main' | sort | cut -d ':' -f1 | grep '.go$' | xargs -n 1 dirname | sort | uniq | grep -v vendor | xargs -i echo './{}' | xargs)"
            echo "paths="$PATHS"" >> $GITHUB_OUTPUT
          fi
      - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version-file: go.mod
          cache-dependency-path: go.sum
          check-latest: true
      - uses: ko-build/setup-ko@ace48d793556083a76f1e3e6068850c1f4a369aa # v0.6
      - id: build
        env:
          KO_DOCKER_REPO: ${{ steps.run-info.outputs.ko-docker-repo }}
          IMAGES_PATH: ${{ steps.run-info.outputs.paths }}
          PUSH: ${{ inputs.push }}
        run: |
          IMAGES="$(ko build --push=$PUSH --base-import-paths $IMAGES_PATH)"
          echo "images=$(echo $IMAGES | tr ' ' ',')" >> $GITHUB_OUTPUT
      - id: sign-images-and-attest-sbom
        if: ${{ inputs.push == true }}
        env:
          COSIGN_YES: "true"
          IMAGE: ${{ steps.build.outputs.images }}
        run: |
          for IMAGE in $(echo ${{ steps.build.outputs.images }} | tr ',' ' '); do
            cosign sign $IMAGE -y --recursive
            cosign download sbom $IMAGE > /tmp/sbom-spdx.json
            cosign attest --predicate /tmp/sbom-spdx.json $IMAGE -y --recursive
          done
      - name: image result
        if: ${{ inputs.push == true }}
        id: result
        run: |
          echo "Build, pushed and signed: $(echo ${{ steps.build.outputs.images }} | tr ',' ' ')"
      - id: build-release
        if: ${{ github.event_name == 'release' && inputs.configPath && inputs.push == true }}
        env:
          KO_DOCKER_REPO: ${{ steps.run-info.outputs.ko-docker-repo }}
        run: |
          ko resolve --base-import-paths -f config/ > ./deploy/release.yaml
      - id: release
        if: ${{ github.event_name == 'release' && inputs.configPath && inputs.push }}
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ./deploy/release.yaml --clobber
      - uses: chainguard-dev/actions/setup-gitsign@698f3ff7c4a8be5d91c8ece9a5859e29cfe58803 # main
        if: ${{ github.event_name == 'release' && inputs.configPath && inputs.push == true }}
      - name: commit and push if there are changes
        if: ${{ github.event_name == 'release' && inputs.configPath && inputs.push == true }}
        run: |
          if { git ls-files --others --exclude-standard ; git diff-index --name-only --diff-filter=d HEAD ; } | grep deploy/release.yaml; then
              echo changes detected
            else
              exit 0
          fi
          TIMESTAMP="$(date +%Y-%m-%d-%H-%M)"
          NEW_BRANCH="deploy-release-manifest-for-version-${{ github.event.release.tag_name }}-${TIMESTAMP}"
          git add ./deploy/release.yaml
          git branch "${NEW_BRANCH}"
          git checkout "${NEW_BRANCH}"
          git commit -s -m "deploy release manifest for version ${{ github.event.release.tag_name }}"
          git push origin "${NEW_BRANCH}"
          gh pr create --title "Update release manifest for version ${{ github.event.release.tag_name }}" --body "Updates to include the release manifest for version ${{ github.event.release.tag_name }}"
