name: build

on:
  push: {}
  release:
    types: [published]
  workflow_dispatch: {}

permissions:
  packages: write
  contents: write
  pull-requests: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: configure system
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
          gh auth status
      - uses: sigstore/cosign-installer@main
      - id: run-info
        name: collect job run info
        env:
          KO_DOCKER_REPO: ghcr.io/${{ github.repository }}
        run: |
          echo "go-version=$(go list -f {{.GoVersion}} -m)" >> $GITHUB_OUTPUT
          echo "ko-docker-repo=${KO_DOCKER_REPO,,}" >> $GITHUB_OUTPUT
          echo "import-paths=$(yq e '.builds[].main' .ko.yaml | xargs)" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@v4
        with:
          go-version: ${{ steps.run-info.outputs.go-version }}
          cache-dependency-path: go.sum
      - uses: ko-build/setup-ko@v0.6
      - id: build
        env:
          KO_DOCKER_REPO: ${{ steps.run-info.outputs.ko-docker-repo }}
          IMAGE_PATHS: ${{ steps.run-info.outputs.import-paths }}
        run: |
          IMAGES=$(ko build $IMAGE_PATHS)
          echo "images=$IMAGES" >> $GITHUB_OUTPUT
      - id: sign-images-and-attest-sbom
        env:
          COSIGN_YES: "true"
        run: |
          for IMAGE in ${{ steps.build.outputs.images }}; do
            cosign sign $IMAGE -y
            cosign download sbom $IMAGE > /tmp/sbom-spdx.json
            cosign attest --predicate /tmp/sbom-spdx.json $IMAGE -y
          done
      - id: release
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ./deploy/release.yaml --clobber
      - name: commit and push if there are changes
        if: github.event_name == 'release'
        run: |
          if { git ls-files --others --exclude-standard ; git diff-index --name-only --diff-filter=d HEAD ; } | grep deploy/release.yaml; then
              echo changes detected
            else
              exit 0
          fi
          TIMESTAMP="$(date +%Y-%m-%d-%H-%M)"
          NEW_BRANCH="deploy-release-manifest-for-version-${{ github.event.release.tag_name }}-${TIMESTAMP}"
          git add ./deploy/release.yaml
          git branch "${NEW_BRANCH}"
          git checkout "${NEW_BRANCH}"
          git commit -s -m "deploy release manifest for version ${{ github.event.release.tag_name }}"
          git push origin "${NEW_BRANCH}"
          gh pr create --title "Update release manifest for version ${{ github.event.release.tag_name }}" --body "Updates to include the release manifest for version ${{ github.event.release.tag_name }}"
