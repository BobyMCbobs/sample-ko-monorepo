name: build

on:
  push: {}
  release:
    types: [published]
  workflow_dispatch: {}

permissions:
  packages: write
  contents: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: sigstore/cosign-installer@main
      - run: |
          echo '${{ toJSON(github) }}' | jq .
      - id: go-version
        run: |
          echo "version=$(go list -f {{.GoVersion}} -m)" >> $GITHUB_OUTPUT
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.go-version.outputs.version }}
      - uses: ko-build/setup-ko@v0.6
      - id: build-resolve
        env:
          KO_DOCKER_REPO: ghcr.io/${{ github.repository }}
        run: |
          export KO_DOCKER_REPO="${KO_DOCKER_REPO,,}"

          ko resolve --bare -f config/ > ./deploy/release.yaml
      - id: sign-images
        env:
          COSIGN_YES: "true"
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        run: |
          for IMAGE in $(yq -N '. | select(.kind == "Service") | .spec.template.spec.containers[].image' ./deploy/release.yaml | xargs); do
            cosign sign --key env://COSIGN_PRIVATE_KEY $IMAGE -y
          done
      - id: release
        if: github.event_name == 'release'
        env:
          GITHUB_TOKEN: ${{ github.TOKEN }}
        run: |
          gh release upload ${{ github.event.release.tag_name }} ./deploy/release.yaml
      - name: commit and push if there are changes
        if: github.event_name == 'release'
        run: |
          if { git ls-files --others --exclude-standard ; git diff-index --name-only --diff-filter=d HEAD ; } | grep deploy/release.yaml; then
              echo changes detected
            else
              exit 0
          fi
          TIMESTAMP="$(date +%Y-%m-%d-%H-%M)"
          NEW_BRANCH="deploy-release-manifest-for-version-${{ github.event.release.tag_name }}-${TIMESTAMP}"
          git add ./deploy/release.yaml
          git branch "${NEW_BRANCH}"
          git checkout "${NEW_BRANCH}"
          git commit -s -m "deploy release manifest for version ${{ github.event.release.tag_name }}"
          git push origin "${NEW_BRANCH}"
          gh pr create --title "Update release manifest for version ${{ github.event.release.tag_name }}" --body "Updates to include the release manifest for version ${{ github.event.release.tag_name }}"
