name: reusable build
on:
  workflow_call:
    inputs:
      registryOverride:
        required: false
        type: string
        description: |
          a container registry to use instead of ghcr.io.
          e.g:
            - quay.io
            - registry.gitlab.com/somecoolproject
            - ghcr.io/somecoolproject/thing
      paths:
        required: false
        type: string
        description: |
          the Go entrypoint paths for applications, where there they have `package main`
          e.g: ./cmd/thing1 ./cmd/thing2
    outputs:
      images:
        value: ${{ jobs.build.outputs.images }}
jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      images: ${{ steps.build.outputs.images }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: configure system
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          gh auth login --with-token < <(echo ${{ secrets.GITHUB_TOKEN }})
          gh auth status
      - uses: sigstore/cosign-installer@001a7d424cbd4db4044e5bffd9481cbb5b451635 # v3.0.3
      - id: run-info
        name: collect job run info
        env:
          KO_DOCKER_REPO: ghcr.io/${{ github.repository }}
        run: |
          echo "go-version=$(go list -f {{.GoVersion}} -m)" >> $GITHUB_OUTPUT
          if [ -n "${{ inputs.registryOverride }}" ]; then
            KO_DOCKER_REPO="${{ inputs.registryOverride }}"
          fi
          echo "ko-docker-repo=${KO_DOCKER_REPO,,}" >> $GITHUB_OUTPUT
          if [ -n "${{ inputs.paths }}" ]; then
            echo "paths="${{ inputs.paths }}"" >> $GITHUB_OUTPUT
          else
            PATHS="$(grep -r 'package main' | sort | cut -d ':' -f1 | grep '.go$' | xargs -n 1 dirname | sort | uniq | grep -v vendor | xargs -i echo './{}' | xargs)"
            echo "paths="$PATHS"" >> $GITHUB_OUTPUT
          fi
      - uses: actions/setup-go@4d34df0c2316fe8122ab82dc22947d607c0c91f9 # v4.0.0
        with:
          go-version: ${{ steps.run-info.outputs.go-version }}
          cache-dependency-path: go.sum
      - uses: ko-build/setup-ko@ace48d793556083a76f1e3e6068850c1f4a369aa # v0.6
      - id: build
        env:
          KO_DOCKER_REPO: ${{ steps.run-info.outputs.ko-docker-repo }}
          IMAGES_PATH: ${{ steps.run-info.outputs.paths }}
        run: |
          IMAGES="$(ko build --base-import-paths $IMAGES_PATH)"
          echo "images=$(echo $IMAGES | tr ' ' ',')" >> $GITHUB_OUTPUT
      - id: sign-images-and-attest-sbom
        env:
          COSIGN_YES: "true"
          IMAGE: ${{ steps.build.outputs.images }}
        run: |
          for IMAGE in $(echo ${{ steps.build.outputs.images }} | tr ',' ' '); do
            cosign sign $IMAGE -y
            cosign download sbom $IMAGE > /tmp/sbom-spdx.json
            cosign attest --predicate /tmp/sbom-spdx.json $IMAGE -y
          done
      - name: image result
        id: result
        run: |
          echo "Build, pushed and signed: $(echo ${{ steps.build.outputs.images }} | tr ',' ' ')"
